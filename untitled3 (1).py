# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xDkJ3NK3svfrLl5UJw8xqJLsTHLhnKm4
"""

from google.colab import drive
drive.mount('/content/drive')

import joblib
import torch
import torchvision
import torchvision.models as models
from torchvision.models import ResNet
import torch.nn as nn

torch.cuda.is_available()

model_2=joblib.load('/content/drive/MyDrive/od1.joblib')

model_2.eval()

load=model_2

def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

from torchvision.transforms import ToTensor
classes=['others','challenger','kanger','limber']

def predict_image(img, model):
    # Convert to a batch of 1
    xb = to_device(img.unsqueeze(0), 'cuda')
    # Get predictions from model
    yb = model(xb)
    print(yb)
    # Pick index with highest probability
    prob, preds  = torch.max(yb, dim=1)
    # Retrieve the class label
    a="others"
    #if prob>0.99:
    return classes[preds[0].item()]
    #else:
      #return a

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

    def epoch_end(self, epoch, result):
        print("Epoch {}: train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch+1, result['train_loss'], result['val_loss'], result['val_acc']))

class ResNet(ImageClassificationBase):
    def __init__(self):
        super().__init__()
        # Use a pretrained model
        self.network = models.resnet50(pretrained=True)
        # Replace last layer
        num_ftrs = self.network.fc.in_features
        self.network.fc = nn.Linear(num_ftrs, len(classes))

    def forward(self, xb):
        return torch.sigmoid(self.network(xb))

model = ResNet()

from PIL import Image
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt
from joblib import load

a=Image.open('/content/iStock-155441000.jpg')

plt.imshow(a)

import torchvision

# Resize the image
image = a.resize((640, 640))

# Convert the image to a tensor
image = torchvision.transforms.ToTensor()(image)

# Load the model
model = load('/content/drive/MyDrive/od1.joblib')

# Predict the image
predict_image(image, model)